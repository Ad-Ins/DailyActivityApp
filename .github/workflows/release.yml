name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Release --no-restore
      
    - name: Publish Self-Contained
      run: dotnet publish AdinersDailyActivityApp.csproj --configuration Release --runtime win-x64 --self-contained true --output ./publish
      
    - name: Setup Inno Setup
      run: |
        choco install innosetup -y
      
    - name: Verify Inno Setup Installation
      run: |
        if (Test-Path "C:\Program Files (x86)\Inno Setup 6\ISCC.exe") {
          echo "Inno Setup found"
        } else {
          echo "Inno Setup not found, trying alternative path"
          Get-ChildItem "C:\Program Files*" -Recurse -Name "ISCC.exe" -ErrorAction SilentlyContinue
        }
      shell: powershell
      
    - name: Build Installer
      run: |
        $isccPaths = @(
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
          "C:\Program Files\Inno Setup 6\ISCC.exe",
          "C:\tools\InnoSetup\ISCC.exe"
        )
        $isccPath = $isccPaths | Where-Object { Test-Path $_ } | Select-Object -First 1
        if ($isccPath) {
          echo "Using ISCC at: $isccPath"
          & $isccPath installer.iss
        } else {
          echo "Searching for ISCC.exe..."
          $found = Get-ChildItem "C:\" -Recurse -Name "ISCC.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($found) {
            echo "Found ISCC at: $found"
            & $found installer.iss
          } else {
            throw "ISCC.exe not found anywhere"
          }
        }
      shell: powershell
      
    - name: List installer files
      run: |
        echo "Checking installer output:"
        if (Test-Path "installer-output") {
          Get-ChildItem installer-output -Recurse
        } else {
          echo "installer-output directory not found"
        }
      shell: powershell
        
    - name: Create ZIP as fallback
      run: |
        cd publish
        7z a ../DailyActivityApp-${{ github.ref_name }}.zip AdinersDailyActivityApp.exe
        cd ../Assets
        7z a ../DailyActivityApp-${{ github.ref_name }}.zip *
        cd ..
        echo "ZIP created as fallback"
        
    - name: Prepare release files
      run: |
        $files = @()
        if (Test-Path "installer-output\*.exe") {
          $files += Get-ChildItem "installer-output\*.exe" | ForEach-Object { $_.FullName }
          echo "Installer found, will upload installer"
        }
        if (Test-Path "DailyActivityApp-*.zip") {
          $files += Get-ChildItem "DailyActivityApp-*.zip" | ForEach-Object { $_.FullName }
          echo "ZIP found, will upload ZIP"
        }
        $files -join "`n" | Out-File -FilePath "release-files.txt"
        echo "Files to upload:"
        Get-Content "release-files.txt"
      shell: powershell
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          installer-output/*.exe
          DailyActivityApp-*.zip
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}